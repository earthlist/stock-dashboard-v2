import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ------------------ Google Sheets Setup ------------------
# ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Service Account JSON Key ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô repo ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏ä‡πà‡∏ô "gcp_key.json"
SHEET_NAME = "macro_dashboard"   # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ sheet ‡πÉ‡∏ô Google Sheets
RANGE_NAME = "Sheet1!A:B"        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏Å‡πá‡∏ö key ‡πÅ‡∏•‡∏∞ value

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
service_account_info = st.secrets["gcp_service_account"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

# ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå Google Sheet
sheet = client.open(SHEET_NAME).sheet1

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Google Sheets ‡πÄ‡∏õ‡πá‡∏ô dict
data = sheet.get_all_records()
values_dict = {row["key"]: float(row["value"]) for row in data} if data else {}

def get_value(name, default):
    return values_dict.get(name, default)

def set_value(name, val):
    # update ‡∏´‡∏£‡∏∑‡∏≠ insert ‡∏ñ‡πâ‡∏≤ key ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    records = sheet.get_all_records()
    keys = [r["key"] for r in records]
    if name in keys:
        row_index = keys.index(name) + 2  # index + header row
        sheet.update_cell(row_index, 2, val)
    else:
        sheet.append_row([name, val])

# ------------------ Streamlit App ------------------
st.set_page_config(page_title="üåç Global Macro Dashboard", layout="wide")
st.title("üåç Global Macro Dashboard ‚Äî Historicals & Signals")
st.markdown("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì + ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå / Historical Rules)")

col1, col2, col3, col4 = st.columns(4)
with col1:
    core_pce = st.number_input("Core PCE YoY (%) / ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô PCE", value=get_value("core_pce", 2.0), step=0.1, format="%.2f")
    core_cpi = st.number_input("Core CPI YoY (%) / ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô CPI", value=get_value("core_cpi", 2.2), step=0.1, format="%.2f")
    ten_y = st.number_input("US 10Y Yield (%) / ‡∏ö‡∏≠‡∏ô‡∏î‡πå‡∏¢‡∏µ‡∏•‡∏î‡πå 10 ‡∏õ‡∏µ", value=get_value("ten_y", 4.0), step=0.1, format="%.2f")
    fed_rate = st.number_input("Fed Funds Rate (%) / ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏™‡∏´‡∏£‡∏±‡∏ê", value=get_value("fed_rate", 5.25), step=0.25, format="%.2f")
with col2:
    pmi = st.number_input("PMI (Global/ISM) / ‡∏î‡∏±‡∏ä‡∏ô‡∏µ PMI", value=get_value("pmi", 50.0), step=0.1, format="%.1f")
    unemp = st.number_input("US Unemployment Rate (%) / ‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô", value=get_value("unemp", 3.8), step=0.1, format="%.2f")
    dxy = st.number_input("US Dollar Index (DXY) / ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå", value=get_value("dxy", 103.0), step=0.1, format="%.1f")
    debt_gdp = st.number_input("US Debt-to-GDP (%) / ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ï‡πà‡∏≠ GDP", value=get_value("debt_gdp", 120.0), step=1.0, format="%.0f")
with col3:
    m2 = st.number_input("M2 YoY Growth (%) / ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á M2", value=get_value("m2", 2.0), step=0.5, format="%.1f")
    repo = st.number_input("Overnight Repo Rate (%) / ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏£‡∏µ‡πÇ‡∏õ", value=get_value("repo", 5.0), step=0.1, format="%.2f")
    margin = st.number_input("Margin Debt (USD bn) / ‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô (‡∏û‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏ô‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå)", value=get_value("margin", 900.0), step=50.0, format="%.0f")
with col4:
    gold = st.number_input("Gold (USD/oz) / ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á", value=get_value("gold", 2500.0), step=1.0, format="%.0f")
    spx = st.number_input("S&P 500 Index / ‡∏î‡∏±‡∏ä‡∏ô‡∏µ S&P 500", value=get_value("spx", 5600.0), step=1.0, format="%.0f")
    btc = st.number_input("Bitcoin (USD) / ‡∏£‡∏≤‡∏Ñ‡∏≤ BTC", value=get_value("btc", 70000.0), step=100.0, format="%.0f")

# ‡∏õ‡∏∏‡πà‡∏° Save ‚Üí ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Google Sheets
if st.button("üíæ Save to Google Sheets"):
    set_value("core_pce", core_pce)
    set_value("core_cpi", core_cpi)
    set_value("ten_y", ten_y)
    set_value("fed_rate", fed_rate)
    set_value("pmi", pmi)
    set_value("unemp", unemp)
    set_value("dxy", dxy)
    set_value("debt_gdp", debt_gdp)
    set_value("m2", m2)
    set_value("repo", repo)
    set_value("margin", margin)
    set_value("gold", gold)
    set_value("spx", spx)
    set_value("btc", btc)
    st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
    
# ---------- Rules ----------
signals = []

def add_signal(name, note, assets_in, assets_out=None):
    signals.append({
        "Signal / ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì": name,
        "Implication / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢": note,
        "Favored Assets / ‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå": ", ".join(assets_in),
        "Unfavored Assets / ‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏î‡∏±‡∏ô": ", ".join(assets_out) if assets_out else ""
    })

# Inflation (Core PCE/CPI)
infl = max(core_pce, core_cpi)
if infl > 3.0:
    add_signal("High Inflation >3% / ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠‡∏™‡∏π‡∏á", "Fed likely to tighten / Fed ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∏‡∏°‡πÄ‡∏Ç‡πâ‡∏°", ["‡∏ó‡∏≠‡∏á", "BTC", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏±‡πâ‡∏ô"], ["‡∏´‡∏∏‡πâ‡∏ô Growth/Tech"])
elif infl < 1.5:
    add_signal("Low Inflation <1.5% / ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠‡∏ï‡πà‡∏≥", "Risk of slowdown ‚Üí easing / ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ä‡∏∞‡∏•‡∏≠ ‚Üí Fed ‡∏ú‡πà‡∏≠‡∏ô", ["‡∏ó‡∏≠‡∏á", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏¢‡∏≤‡∏ß", "REITs"], [])
else:
    add_signal("Inflation ~2% / ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏õ‡πâ‡∏≤", "Goldilocks zone", ["‡∏´‡∏∏‡πâ‡∏ô Tech/Growth", "EM equities"], [])

# 10Y rules
if ten_y > 4.5:
    add_signal(
        "10Y ‡∏û‡∏∏‡πà‡∏á (>4.5%)",
        "Discount rate ‡∏™‡∏π‡∏á ‚Üí ‡∏Å‡∏î‡∏î‡∏±‡∏ô Valuation",
        ["‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏±‡πâ‡∏ô", "‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•", "Defensive"],
        ["‡∏´‡∏∏‡πâ‡∏ô Tech/Growth", "REITs"]
    )
elif ten_y < 3.5:
    add_signal(
        "10Y ‡∏ï‡πà‡∏≥ (<3.5%)",
        "‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á/‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó)",
        ["‡∏ó‡∏≠‡∏á", "Bitcoin", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏¢‡∏≤‡∏ß", "REITs"],
        []
    )

# PMI rules
if pmi < 50.0:
    add_signal(
        "PMI < 50 (‡∏´‡∏î‡∏ï‡∏±‡∏ß)",
        "Cyclicals ‡πÅ‡∏û‡πâ, Safe haven ‡πÄ‡∏î‡πà‡∏ô",
        ["‡∏ó‡∏≠‡∏á", "‡∏´‡∏∏‡πâ‡∏ô Defensive", "Healthcare", "Utilities"],
        ["Cyclicals (Retail/Industrials)"]
    )
elif pmi >= 52.0:
    add_signal(
        "PMI > 52 (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏á)",
        "Cyclicals/‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô/‡πÇ‡∏†‡∏Ñ‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏î‡πà‡∏ô",
        ["Industrials", "Energy", "EM equities", "Commodities"],
        []
    )

# Unemployment rules
if 3.0 <= unemp <= 3.5:
    add_signal(
        "‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≥ (3‚Äì3.5%)",
        "‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏∂‡∏á ‚Üí Fed ‡∏ä‡∏∞‡∏•‡∏≠‡∏•‡∏î‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢",
        ["‡∏´‡∏∏‡πâ‡∏ô Defensive", "‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏±‡πâ‡∏ô"],
        []
    )
elif unemp >= 4.5:
    add_signal(
        "‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á (>4.5%)",
        "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢ ‚Üí Fed ‡πÄ‡∏£‡πà‡∏á‡∏ú‡πà‡∏≠‡∏ô",
        ["‡∏ó‡∏≠‡∏á", "Bitcoin", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏¢‡∏≤‡∏ß", "REITs (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á)"],
        []
    )

# DXY rules
if dxy >= 105.0:
    add_signal(
        "‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå‡πÅ‡∏Ç‡πá‡∏á (>105)",
        "‡∏Å‡∏î‡∏î‡∏±‡∏ô‡∏ó‡∏≠‡∏á/‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï/EM; US assets ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö",
        ["‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê Large Cap", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏´‡∏£‡∏±‡∏ê", "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î USD"],
        ["‡∏ó‡∏≠‡∏á", "Bitcoin", "EM equities"]
    )
elif dxy <= 100.0:
    add_signal(
        "‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå‡∏≠‡πà‡∏≠‡∏ô (<100)",
        "‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏´‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ EM/‡∏ó‡∏≠‡∏á/‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï",
        ["‡∏ó‡∏≠‡∏á", "Bitcoin", "EM equities", "Commodities"],
        []
    )

# Fed Funds Rate
if fed_rate > 5.0:
    add_signal("Fed Rate >5% / ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á", "Historic risk of recession / ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢", ["‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏±‡πâ‡∏ô", "‡∏´‡∏∏‡πâ‡∏ô Defensive"], ["‡∏´‡∏∏‡πâ‡∏ô Tech/Growth"])
elif fed_rate < 2.0:
    add_signal("Fed Rate <2% / ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ï‡πà‡∏≥", "Stimulus mode / ‡∏†‡∏≤‡∏ß‡∏∞‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à", ["‡∏´‡∏∏‡πâ‡∏ô", "‡∏ó‡∏≠‡∏á", "BTC"], [])

# Debt-to-GDP
if debt_gdp > 120:
    add_signal("Debt/GDP >120%", "Fiscal risk long-term / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á", ["‡∏ó‡∏≠‡∏á", "BTC"], [])
elif debt_gdp < 80:
    add_signal("Debt/GDP <80%", "Healthy debt level / ‡∏´‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", ["‡∏´‡∏∏‡πâ‡∏ô", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£"], [])

# M2
if m2 > 10:
    add_signal("M2 Growth >10%", "Liquidity boom / ‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏•‡πâ‡∏ô", ["‡∏´‡∏∏‡πâ‡∏ô", "‡∏ó‡∏≠‡∏á", "BTC"], [])
elif m2 < 0:
    add_signal("M2 Negative", "Liquidity contraction / ‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏´‡∏î", ["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î", "USD", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£"], [])

# Repo
if repo > 8:
    add_signal("Repo Spike >8%", "Funding stress / ‡∏ï‡∏∂‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á", ["‡∏ó‡∏≠‡∏á", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏±‡πâ‡∏ô"], ["‡∏´‡∏∏‡πâ‡∏ô"])
    
# Margin Debt
if margin > 1000:
    add_signal("Margin Debt >1T", "Bubble risk / ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ü‡∏≠‡∏á‡∏™‡∏ö‡∏π‡πà", [], ["‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏Å‡πá‡∏á‡∏Å‡∏≥‡πÑ‡∏£", "‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï"])
elif margin < 500:
    add_signal("Margin Debt <500B", "Low leverage / ‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏ï‡πà‡∏≥", ["‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô"], [])

# ---------- Show Signals ----------
st.subheader("üìå Signals Now / ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
st.dataframe(pd.DataFrame(signals), use_container_width=True)

st.markdown("---")
st.subheader("üìñ Historical Reference / ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå")
hist_rows = [
    ["Core PCE/CPI > 3%", "‡∏´‡∏∏‡πâ‡∏ô‡∏Å‡∏î‡∏î‡∏±‡∏ô; ‡∏ó‡∏≠‡∏á/‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏ö‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ö‡∏ß‡∏Å", "Defensive, ‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏±‡πâ‡∏ô", ""],
    ["Core PCE/CPI ~2%", "Goldilocks", "‡∏´‡∏∏‡πâ‡∏ô Growth/Tech, EM", ""],
    ["Core PCE/CPI < 1.5%", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ä‡∏∞‡∏•‡∏≠, Fed ‡∏ú‡πà‡∏≠‡∏ô", "‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏¢‡∏≤‡∏ß, ‡∏ó‡∏≠‡∏á, REITs", ""],
    ["10Y > 4.5%", "Discount rate ‡∏™‡∏π‡∏á", "Dividend/Defensive", ""],
    ["10Y < 3.5%", "‡∏´‡∏ô‡∏∏‡∏ô risk-on ‡πÅ‡∏•‡∏∞ bonds ‡∏¢‡∏≤‡∏ß", "‡∏ó‡∏≠‡∏á, BTC, REITs", ""],
    ["PMI < 50", "‡∏´‡∏î‡∏ï‡∏±‡∏ß", "Defensive, ‡∏ó‡∏≠‡∏á", ""],
    ["PMI > 52", "‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏á", "Cyclicals, Energy, EM", ""],
    ["Unemp > 4.5%", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢", "Safe haven, Bonds ‡∏¢‡∏≤‡∏ß", "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å (3‚Äì3.5%) ‡∏ô‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà crash ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà Fed policy"],
    ["DXY > 105", "USD ‡πÅ‡∏Ç‡πá‡∏á", "US assets; ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ó‡∏≠‡∏á/BTC/EM", ""],
    ["DXY < 100", "USD ‡∏≠‡πà‡∏≠‡∏ô", "‡∏ó‡∏≠‡∏á, BTC, EM, Commodities", ""],
    ["Fed Funds >5%", "Recession risk / ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢", "‡∏´‡∏∏‡πâ‡∏ô Defensive, ‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏±‡πâ‡∏ô", ""],
    ["M2 Growth >10%", "Assets boom / ‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ö‡∏π‡∏°", "‡∏´‡∏∏‡πâ‡∏ô, ‡∏ó‡∏≠‡∏á, BTC", ""],
    ["M2 <0%", "Liquidity crunch / ‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏´‡∏î", "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î, USD", ""],
    ["Margin Debt Peak", "Often market top / ‡∏°‡∏±‡∏Å‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏•‡∏≤‡∏î", "Bubble assets", "‡πÑ‡∏°‡πà‡∏°‡∏µ threshold ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î (US >120% ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà crash ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ USD ‡πÄ‡∏õ‡πá‡∏ô reserve currency)"],
    ["Repo Spike >8%", "Funding crisis / ‡∏ï‡∏∂‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á", "‡∏ó‡∏≠‡∏á, ‡∏û‡∏±‡∏ô‡∏ò‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏±‡πâ‡∏ô", ""]
]

hist_df = pd.DataFrame(hist_rows, columns=["Condition / ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç", "Impact / ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö", "Favored / ‡πÄ‡∏î‡πà‡∏ô", "Note / ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"])
st.dataframe(hist_df, use_container_width=True)

st.info("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ / Note: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏£‡∏±‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏£‡πà‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢")
